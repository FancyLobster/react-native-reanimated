"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[823],{78180:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>f,default:()=>x,frontMatter:()=>g,metadata:()=>v,toc:()=>y});var a=n(83117),i=n(67294),o=n(3905),r=n(67177),s=n(14779),l=n(72862),d=n(10758),u=n(10919),m=n(49638);function p(){const e=(0,d.y)(100);return i.createElement(r.Z,{style:c.container},i.createElement(m.n,{style:{...c.box,width:e}}),i.createElement(s.Z,{onPress:()=>{e.value=(0,u.V)(e.value+50)},title:"Click me"}))}const c=l.Z.create({container:{flex:1,alignItems:"center"},box:{height:100,backgroundColor:"#b58df1",borderRadius:20,marginVertical:64}}),h="import React from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport Animated, { useSharedValue, withSpring } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = withSpring(width.value + 50);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Animated.View style={{ ...styles.box, width }} />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  box: {\n    height: 100,\n    backgroundColor: '#b58df1',\n    borderRadius: 20,\n    marginVertical: 64,\n  },\n});\n",g={sidebar_position:2},f="Your First Animation",v={unversionedId:"fundamentals/your-first-animation",id:"fundamentals/your-first-animation",title:"Your First Animation",description:"In this section, we'll guide you through the basic concepts of Reanimated. If you're new to Reanimated, you're in the right hands! We're going to start by building a simple animation which will help you develop a basic understanding of the library. Then, in the following sections, we're going to build on top of this knowledge and further expand your skills. Let's go!",source:"@site/docs/fundamentals/your-first-animation.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/your-first-animation",permalink:"/react-native-reanimated/docs/fundamentals/your-first-animation",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/tree/main/docs/docs/fundamentals/your-first-animation.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/react-native-reanimated/docs/fundamentals/getting-started"},next:{title:"Animating styles and props",permalink:"/react-native-reanimated/docs/fundamentals/animating-styles-and-props"}},k={},y=[{value:"Using an Animated component",id:"using-an-animated-component",level:2},{value:"Defining a shared value",id:"defining-a-shared-value",level:2},{value:"Using a shared value",id:"using-a-shared-value",level:2},{value:"Using an animation function",id:"using-an-animation-function",level:2},{value:"Summary",id:"summary",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}],w=(b="InteractiveExample",function(e){return console.warn("Component "+b+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var b;const N={toc:y},C="wrapper";function x(e){let{components:t,...n}=e;return(0,o.kt)(C,(0,a.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"your-first-animation"},"Your First Animation"),(0,o.kt)("p",null,"In this section, we'll guide you through the basic concepts of Reanimated. If you're new to Reanimated, you're in the right hands! We're going to start by building a simple animation which will help you develop a basic understanding of the library. Then, in the following sections, we're going to build on top of this knowledge and further expand your skills. Let's go!"),(0,o.kt)("h2",{id:"using-an-animated-component"},"Using an Animated component"),(0,o.kt)("p",null,"Let's start by having something that we could see on the screen. First, to create an animatable component you need to import an ",(0,o.kt)("inlineCode",{parentName:"p"},"Animated")," object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import Animated from 'react-native-reanimated';\n")),(0,o.kt)("p",null,"This ",(0,o.kt)("inlineCode",{parentName:"p"},"Animated")," object wraps React Native built-ins such as ",(0,o.kt)("inlineCode",{parentName:"p"},"View"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList"),"."),(0,o.kt)("p",null,"You use these components as any other JSX components:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{5}","{5}":!0},"import Animated from 'react-native-reanimated';\n\nexport default function App() {\n  return (\n    <Animated.View\n      style={{\n        width: 100,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can create your own custom Animated components with ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/createAnimatedComponent"},(0,o.kt)("inlineCode",{parentName:"a"},"createAnimatedComponent")),".")),(0,o.kt)("h2",{id:"defining-a-shared-value"},"Defining a shared value"),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"/docs/fundamentals/glossary#shared-value"},"shared value")," is a driving factor of all your animations. You can think of it as a React state which is automagically kept in sync between the \u201cJavaScript\u201d and the \u201cnative\u201d side of your app (hence the name). You create shared values using a ",(0,o.kt)("inlineCode",{parentName:"p"},"useSharedValue")," hook:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useSharedValue } from 'react-native-reanimated';\n")),(0,o.kt)("p",null,"As with any other ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-rules.html"},"React hook"),", you need to define it in your component's body. In a shared value, you can store any JS value like ",(0,o.kt)("inlineCode",{parentName:"p"},"number"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," but also data structures such as ",(0,o.kt)("inlineCode",{parentName:"p"},"array")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"object"),"."),(0,o.kt)("p",null,"For now, let's use ",(0,o.kt)("inlineCode",{parentName:"p"},"100")," as the default value of the ",(0,o.kt)("inlineCode",{parentName:"p"},"useSharedValue")," hook and pass the returned value as an inline style of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Animated.View"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{4,9}","{4,9}":!0},"import Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  return (\n    <Animated.View\n      style={{\n        width,\n        height: 100,\n        backgroundColor: 'violet',\n      }}\n    />\n  );\n}\n")),(0,o.kt)("h2",{id:"using-a-shared-value"},"Using a shared value"),(0,o.kt)("p",null,"Let's create a very simple animation that will animate a ",(0,o.kt)("inlineCode",{parentName:"p"},"width")," of an element. We'll make it expand by ",(0,o.kt)("inlineCode",{parentName:"p"},"50px")," on each button press. We can do this by modifying a shared value connected to the ",(0,o.kt)("inlineCode",{parentName:"p"},"width")," property of an ",(0,o.kt)("inlineCode",{parentName:"p"},"Animated.View")," component. I know it might sound complicated, but it's actually quite simple."),(0,o.kt)("p",null,"Values stored in shared values are accessed and modified by their ",(0,o.kt)("inlineCode",{parentName:"p"},".value")," property."),(0,o.kt)("p",null,"There's no setter or anything - you simply mutate the ",(0,o.kt)("inlineCode",{parentName:"p"},".value")," property like there's no tomorrow."),(0,o.kt)("p",null,"Let's define a ",(0,o.kt)("inlineCode",{parentName:"p"},"handlePress")," function inside of which we'll modify the shared value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{8,20}","{8,20}":!0},"import { Button, View } from 'react-native';\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = width.value + 50;\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={{\n          width,\n          height: 100,\n          backgroundColor: 'violet',\n        }}\n      />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n")),(0,o.kt)("p",null,"Please hold on a second before you shorten ",(0,o.kt)("inlineCode",{parentName:"p"},"width.value = width.value + 50")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"width.value += 50"),". We're preparing this code for the final step which will finally bring our animation to life!"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"It's a common mistake to modify a shared value directly like this: ",(0,o.kt)("del",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"del"},"sv = sv + 100;")),". Always remember to access the shared value by using the ",(0,o.kt)("inlineCode",{parentName:"p"},".value")," property instead. Here, the correct usage would be ",(0,o.kt)("inlineCode",{parentName:"p"},"sv.value = sv.value + 100;"),".")),(0,o.kt)("h2",{id:"using-an-animation-function"},"Using an animation function"),(0,o.kt)("p",null,"Finally, import ",(0,o.kt)("inlineCode",{parentName:"p"},"withSpring")," function and wrap around ",(0,o.kt)("inlineCode",{parentName:"p"},"width.value + 50")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"handlePress")," function so that the value which ",(0,o.kt)("inlineCode",{parentName:"p"},"withSpring")," returns modifies the shared value. This will create a bouncy spring animation that transitions the width of the element from its current value (here ",(0,o.kt)("inlineCode",{parentName:"p"},"width.value"),") to the new one (here ",(0,o.kt)("inlineCode",{parentName:"p"},"width.value + 50"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{2,8}","{2,8}":!0},"import { Button, View } from 'react-native';\nimport Animated, { useSharedValue, withSpring } from 'react-native-reanimated';\n\nexport default function App() {\n  const width = useSharedValue(100);\n\n  const handlePress = () => {\n    width.value = withSpring(width.value + 50);\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={{\n          width,\n          height: 100,\n          backgroundColor: 'violet',\n        }}\n      />\n      <Button onPress={handlePress} title=\"Click me\" />\n    </View>\n  );\n}\n")),(0,o.kt)("p",null,"And voil\xe0, we've made our first animation using Reanimated! You can see how it works in its full glory in a preview below:"),(0,o.kt)(w,{src:h,component:(0,o.kt)(p,{mdxType:"FirstAnimation"}),mdxType:"InteractiveExample"}),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"In this section, we gained a firm grasp on the Reanimated fundamentals. We learned about ",(0,o.kt)("inlineCode",{parentName:"p"},"Animated")," components, shared values and how to use them to create a simple animation. To sum up:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Animated")," components are used to define animatable elements."),(0,o.kt)("li",{parentName:"ul"},"Shared values are a driving factor of all animations and we define them using a ",(0,o.kt)("inlineCode",{parentName:"li"},"useSharedValue")," hook."),(0,o.kt)("li",{parentName:"ul"},"Shared values are always accessed and modified by their ",(0,o.kt)("inlineCode",{parentName:"li"},".value")," property (eg. ",(0,o.kt)("inlineCode",{parentName:"li"},"sv.value = 100;"),")."),(0,o.kt)("li",{parentName:"ul"},"To create smooth animations modify shared values using animation functions like ",(0,o.kt)("inlineCode",{parentName:"li"},"withTiming"))),(0,o.kt)("h2",{id:"whats-next"},"What's next?"),(0,o.kt)("p",null,"In ",(0,o.kt)("a",{parentName:"p",href:"/docs/fundamentals/animating-styles-and-props"},"the next section"),", we will learn more about how to animate styles and props using ",(0,o.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"useAnimatedProps")," hooks."))}x.isMDXComponent=!0},10919:(e,t,n)=>{n.d(t,{V:()=>o});var a=n(76933);function i(e,t,n){if(t.skipAnimation)return 0;const{stiffness:a,dampingRatio:i,restSpeedThreshold:o,duration:r}=t;return function(e){let{min:t,max:n,func:a,maxIterations:i=20}=e,o=i,r=(n+t)/2;for(;Math.abs(a(r))>5e-5&&o>0;)o-=1,a(r)<0?t=r:n=r,r=(t+n)/2;return r}({min:0,max:100,func:t=>{const s=(t*n*n+a*e*e)/(Math.exp(1-.5*i)*a);return-2*t/(2*i*Math.sqrt(a*t))*1e3*Math.log(.01*o/s)-r}})}const o=(e,t,n)=>(0,a.oF)(e,(()=>{const o={...{damping:10,mass:1,stiffness:100,overshootClamping:!1,restDisplacementThreshold:.01,restSpeedThreshold:2,velocity:0,duration:2e3,dampingRatio:.5,reduceMotion:void 0},...t,useDuration:!!(null!=t&&t.duration||null!=t&&t.dampingRatio),skipAnimation:!1};return o.skipAnimation=!function(e){let t="";return["stiffness","damping","dampingRatio","restDisplacementThreshold","restSpeedThreshold","mass"].forEach((n=>{const a=e[n];a<=0&&(t+=`, ${n} must be grater than zero but got ${a}`)})),e.duration<0&&(t+=`, duration can't be negative, got ${e.duration}`),""!==t&&console.warn("[Reanimated] Invalid spring config"+t),""===t}(o),0===o.duration&&(o.skipAnimation=!0),{onFrame:function(e,t){const{toValue:n,startTimestamp:a,current:i}=e,r=t-a;if(o.useDuration&&r>=o.duration)return e.current=n,e.lastTimestamp=0,!0;if(o.skipAnimation)return e.current=n,e.lastTimestamp=0,!0;const{lastTimestamp:s,velocity:l}=e,d=Math.min(t-s,64);e.lastTimestamp=t;const u=d/1e3,m=-l,p=n-i,{zeta:c,omega0:h,omega1:g}=e,{position:f,velocity:v}=c<1?function(e,t){const{toValue:n,current:a,velocity:i}=e,{zeta:o,t:r,omega0:s,omega1:l}=t,d=-i,u=n-a,m=Math.sin(l*r),p=Math.cos(l*r),c=Math.exp(-o*s*r),h=c*(m*((d+o*s*u)/l)+u*p);return{position:n-h,velocity:o*s*h-c*(p*(d+o*s*u)-l*u*m)}}(e,{zeta:c,v0:m,x0:p,omega0:h,omega1:g,t:u}):function(e,t){const{toValue:n}=e,{v0:a,x0:i,omega0:o,t:r}=t,s=Math.exp(-o*r);return{position:n-s*(i+(a+o*i)*r),velocity:s*(a*(r*o-1)+r*i*o*o)}}(e,{v0:m,x0:p,omega0:h,t:u});e.current=f,e.velocity=v;const{isOvershooting:k,isVelocity:y,isDisplacement:w}=function(e,t){const{toValue:n,velocity:a,startValue:i,current:o}=e;return{isOvershooting:!!t.overshootClamping&&(o>n&&i<n||o<n&&i>n),isVelocity:Math.abs(a)<t.restSpeedThreshold,isDisplacement:Math.abs(n-o)<t.restDisplacementThreshold}}(e,o),b=k||y&&w;return!(o.useDuration||!b)&&(e.velocity=0,e.current=n,e.lastTimestamp=0,!0)},onStart:function(e,t,n,a){e.current=t,e.startValue=t;let r=o.mass;const s=function(e,t){return(null==e?void 0:e.lastTimestamp)&&(null==e?void 0:e.startTimestamp)&&(null==e?void 0:e.toValue)===t.toValue&&(null==e?void 0:e.duration)===t.duration&&(null==e?void 0:e.dampingRatio)===t.dampingRatio}(a,e),l=o.duration,d=s?null==a?void 0:a.startValue:Number(e.toValue)-t;if(e.velocity=a?(s?null==a?void 0:a.velocity:(null==a?void 0:a.velocity)+o.velocity)||0:o.velocity||0,s)e.zeta=(null==a?void 0:a.zeta)||0,e.omega0=(null==a?void 0:a.omega0)||0,e.omega1=(null==a?void 0:a.omega1)||0;else{if(o.useDuration){const t=s?l-(((null==a?void 0:a.lastTimestamp)||0)-((null==a?void 0:a.startTimestamp)||0)):l;o.duration=t,r=i(d,o,e.velocity)}const{zeta:t,omega0:n,omega1:u}=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1?arguments[1]:void 0;if(t.skipAnimation)return{zeta:0,omega0:0,omega1:0};if(t.useDuration){const{stiffness:n,dampingRatio:a}=t,i=Math.sqrt(n/e);return{zeta:a,omega0:i,omega1:i*Math.sqrt(1-a**2)}}{const{damping:e,mass:n,stiffness:a}=t,i=e/(2*Math.sqrt(a*n)),o=Math.sqrt(a/n);return{zeta:i,omega0:o,omega1:o*Math.sqrt(1-i**2)}}}(r,o);e.zeta=t,e.omega0=n,e.omega1=u}e.lastTimestamp=(null==a?void 0:a.lastTimestamp)||n,e.startTimestamp=s&&(null==a?void 0:a.startTimestamp)||n},toValue:e,velocity:o.velocity||0,current:e,startValue:0,callback:n,lastTimestamp:0,startTimestamp:0,zeta:0,omega0:0,omega1:0,reduceMotion:(0,a.uh)(o.reduceMotion)}}))},49638:(e,t,n)=>{n.d(t,{n:()=>i});var a=n(67177);const i=(0,n(33705).F)(a.Z)},14779:(e,t,n)=>{n.d(t,{Z:()=>k});var a=n(67294),i=n(72862),o=n(83117),r=n(80102),s=n(16528),l=n(94119),d=n(67177),u=["activeOpacity","delayPressIn","delayPressOut","delayLongPress","disabled","focusable","onLongPress","onPress","onPressIn","onPressOut","rejectResponderTermination","style"];function m(e,t){var n=e.activeOpacity,i=e.delayPressIn,m=e.delayPressOut,c=e.delayLongPress,h=e.disabled,g=e.focusable,f=e.onLongPress,v=e.onPress,k=e.onPressIn,y=e.onPressOut,w=e.rejectResponderTermination,b=e.style,N=(0,r.Z)(e,u),C=(0,a.useRef)(null),x=(0,s.Z)(t,C),V=(0,a.useState)("0s"),A=V[0],S=V[1],P=(0,a.useState)(null),T=P[0],R=P[1],D=(0,a.useCallback)(((e,t)=>{R(e),S(t?t/1e3+"s":"0s")}),[R,S]),M=(0,a.useCallback)((e=>{D(null!=n?n:.2,e)}),[n,D]),I=(0,a.useCallback)((e=>{D(null,e)}),[D]),L=(0,a.useMemo)((()=>({cancelable:!w,disabled:h,delayLongPress:c,delayPressStart:i,delayPressEnd:m,onLongPress:f,onPress:v,onPressStart(e){var t=null!=e.dispatchConfig?"onResponderGrant"===e.dispatchConfig.registrationName:"keydown"===e.type;M(t?0:150),null!=k&&k(e)},onPressEnd(e){I(250),null!=y&&y(e)}})),[c,i,m,h,f,v,k,y,w,M,I]),Z=(0,l.Z)(C,L);return a.createElement(d.Z,(0,o.Z)({},N,Z,{accessibilityDisabled:h,focusable:!h&&!1!==g,pointerEvents:h?"none":void 0,ref:x,style:[p.root,!h&&p.actionable,b,null!=T&&{opacity:T},{transitionDuration:A}]}))}var p=i.Z.create({root:{transitionProperty:"opacity",transitionDuration:"0.15s",userSelect:"none"},actionable:{cursor:"pointer",touchAction:"manipulation"}}),c=a.memo(a.forwardRef(m));c.displayName="TouchableOpacity";const h=c;var g=n(24404),f=a.forwardRef(((e,t)=>{var n=e.accessibilityLabel,i=e.color,o=e.disabled,r=e.onPress,s=e.testID,l=e.title;return a.createElement(h,{accessibilityLabel:n,accessibilityRole:"button",disabled:o,focusable:!o,onPress:r,ref:t,style:[v.button,i&&{backgroundColor:i},o&&v.buttonDisabled],testID:s},a.createElement(g.Z,{style:[v.text,o&&v.textDisabled]},l))}));f.displayName="Button";var v=i.Z.create({button:{backgroundColor:"#2196F3",borderRadius:2},text:{color:"#fff",fontWeight:"500",padding:8,textAlign:"center",textTransform:"uppercase"},buttonDisabled:{backgroundColor:"#dfdfdf"},textDisabled:{color:"#a1a1a1"}});const k=f}}]);
"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[9659],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(a),d=r,f=c["".concat(s,".").concat(d)]||c[d]||u[d]||i;return a?n.createElement(f,o(o({ref:t},p),{},{components:a})):n.createElement(f,o({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},36876:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var n=a(83117),r=(a(67294),a(3905));const i={},o=void 0,l={unversionedId:"animations/shared/animationToValue",id:"animations/shared/animationToValue",title:"animationToValue",description:"The value on which the animation will come at rest. Supported categories:",source:"@site/docs/animations/shared/animationToValue.mdx",sourceDirName:"animations/shared",slug:"/animations/shared/animationToValue",permalink:"/react-native-reanimated/docs/animations/shared/animationToValue",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/tree/main/docs/docs/animations/shared/animationToValue.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"withClamp",permalink:"/react-native-reanimated/docs/animations/withClamp"},next:{title:"Core",permalink:"/react-native-reanimated/docs/category/core"}},s={},m=[],p={toc:m},c="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The value on which the animation will come at rest. Supported categories:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"numbers")," - number can be a either a number or a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"suffixed numbers")," - strings being a number with a unit, like ",(0,r.kt)("inlineCode",{parentName:"li"},'"5.5%"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"90deg"')," or even ",(0,r.kt)("inlineCode",{parentName:"li"},'"3bananas'),'". Just make sure there is no space between number and suffix, also suffix should consist of basic english letters only.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"colors"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Hexadecimal integer - e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"0xff1234"),","),(0,r.kt)("li",{parentName:"ul"},"RGB (Red, Green, Blue) - e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},'"rgb(100, 50, 0)"'),","),(0,r.kt)("li",{parentName:"ul"},"RGBA (Red, Green, Blue, Alpha) - e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},'"rgba(255, 105, 180, 0)'),'",'),(0,r.kt)("li",{parentName:"ul"},"RGB Hexadecimal - e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},'"#53575E"'),","),(0,r.kt)("li",{parentName:"ul"},"HSL (Hue, Saturation, Lightness) - e.g.",(0,r.kt)("inlineCode",{parentName:"li"},'"hsl(0, 50%, 50%)"'),","),(0,r.kt)("li",{parentName:"ul"},"Named colors - e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},'"dodgerblue"'),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"objects")," - object with properties that will be animated separately,"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"array")," - array of numbers, each value will be animated separately."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"transformation matrix")," - an array consisting of exactly 16 numerical values is by default animated as a transformation matrix. The numbers in the matrix aren't animated separately. Instead, the array gets decomposed into 3 basic transformations - rotation, scale, and translation \u2013 which are then animated separately.")),(0,r.kt)("p",null,"Please mind, that ",(0,r.kt)("inlineCode",{parentName:"p"},"toValue")," and the animated shared value have to share the same category (e.g. you can't animate ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"100px")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"50%"),")."))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[987],{7339:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"accordion","metadata":{"permalink":"/react-native-reanimated/examples/accordion","source":"@site/blog/accordion.md","title":"Accordion","description":"An accordion allows to show and hide a piece of content with a smooth animation. Commonly used in \\"FAQ\\" sections.","date":"2024-04-19T12:51:14.000Z","formattedDate":"April 19, 2024","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"accordion","title":"Accordion"},"nextItem":{"title":"Bottom Sheet","permalink":"/react-native-reanimated/examples/bottomsheet"}},"content":"An accordion allows to show and hide a piece of content with a smooth animation. Commonly used in \\"FAQ\\" sections.\\n\\nimport Accordion from \'@site/static/examples/Accordion\';\\nimport AccordionSrc from \'!!raw-loader!@site/static/examples/Accordion\';\\nimport ExampleVideo from \'@site/src/components/ExampleVideo\';\\n\\n<InteractiveExample src={AccordionSrc} component={<Accordion />} />\\n\\nThe following implementation of an accordion relies on [shared values](/docs/fundamentals/glossary#shared-value). Leveraging shared values helps to prevent unnecessary re-renders. We define shared values using the useSharedValue hook.\\n\\n<CollapsibleCode src={AccordionSrc} showLines={[16,16]}/>\\n\\n<ExampleVideo\\nsources={{\\n    android: \\"/react-native-reanimated/recordings/examples/accordion_android.mov\\",\\n    ios: \\"/react-native-reanimated/recordings/examples/accordion_ios.mov\\"\\n  }}\\n/>\\n\\nThe **AccordionItem** component encapsulates each item in the accordion. A `height` shared value manages the height of the item. The height dynamically adjusts based on the `isExpanded` prop, resulting in smooth expansion and collapse animations. The `duration` prop controls the duration of the animation.\\n\\nInside the **AccordionItem**, the children represent the content section. It can accommodate various types of content.\\n\\n<samp id=\\"Accordion\\">Accordion</samp>\\n\\n<CollapsibleCode src={AccordionSrc} showLines={[9,41]}/>"},{"id":"bottomsheet","metadata":{"permalink":"/react-native-reanimated/examples/bottomsheet","source":"@site/blog/bottom-sheet.md","title":"Bottom Sheet","description":"Bottom sheets are surfaces containing supplementary content, anchored to the bottom of the screen. They can provide users with quick access to contextual information, actions, or settings without interrupting their current workflow.","date":"2024-04-19T12:51:14.000Z","formattedDate":"April 19, 2024","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"bottomsheet","title":"Bottom Sheet"},"prevItem":{"title":"Accordion","permalink":"/react-native-reanimated/examples/accordion"},"nextItem":{"title":"Marquee","permalink":"/react-native-reanimated/examples/marquee"}},"content":"Bottom sheets are surfaces containing supplementary content, anchored to the bottom of the screen. They can provide users with quick access to contextual information, actions, or settings without interrupting their current workflow.\\n\\nimport BottomSheet from \'@site/static/examples/BottomSheet\';\\nimport BottomSheetSrc from \'!!raw-loader!@site/static/examples/BottomSheet\';\\nimport ExampleVideo from \'@site/src/components/ExampleVideo\';\\nimport CollapsibleCode from \'@site/src/components/CollapsibleCode\';\\n\\n<InteractiveExample src={BottomSheetSrc} component={<BottomSheet />} />\\n\\nThe **BottomSheet** component accepts props such as `isOpen` - a [shared value](/docs/fundamentals/glossary#shared-value) indicating whether the bottom sheet is open or closed, `toggleSheet` - a function to toggle the visibility of the bottom sheet, and an optional `duration` for animation.\\n\\n<samp id=\\"BottomSheet\\">Bottom Sheet</samp>\\n\\n<CollapsibleCode src={BottomSheetSrc} showLines={[17,48]}/>\\n\\nThe `height` shared value is used to track the height of the bottom sheet, while the `progress` derived value interpolates between 0 and 1 based on the state of `isOpen`, controlling the animation of the bottom sheet.\\n\\n<ExampleVideo\\nsources={{\\n    android: \\"/react-native-reanimated/recordings/examples/bottom_sheet_android.mov\\",\\n    ios: \\"/react-native-reanimated/recordings/examples/bottom_sheet_ios.mov\\"\\n  }}\\n/>\\n\\n<CollapsibleCode src={BottomSheetSrc} showLines={[18,21]}/>\\n\\nThe `useAnimatedStyle` hook helps in creating [animated styles](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedStyle/) based on shared values. These styles are then applied to **BottomSheet** to make it visually dynamic by adding backdrop and translating bottom sheet to the top.\\n\\n<CollapsibleCode src={BottomSheetSrc} showLines={[23,32]}/>"},{"id":"marquee","metadata":{"permalink":"/react-native-reanimated/examples/marquee","source":"@site/blog/marquee.md","title":"Marquee","description":"A marquee is an element used to display scrolling content horizontally within a confined space. It\'s commonly seen in applications to information such as news tickers, advertisements, or any content that needs continuous display within a limited area.","date":"2024-04-19T12:51:14.000Z","formattedDate":"April 19, 2024","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"marquee","title":"Marquee"},"prevItem":{"title":"Bottom Sheet","permalink":"/react-native-reanimated/examples/bottomsheet"},"nextItem":{"title":"Section List","permalink":"/react-native-reanimated/examples/sectionlist"}},"content":"A marquee is an element used to display scrolling content horizontally within a confined space. It\'s commonly seen in applications to information such as news tickers, advertisements, or any content that needs continuous display within a limited area.\\n\\nimport Marquee from \'@site/static/examples/Marquee\';\\nimport MarqueeSrc from \'!!raw-loader!@site/static/examples/Marquee\';\\nimport ExampleVideo from \'@site/src/components/ExampleVideo\';\\nimport CollapsibleCode from \'@site/src/components/CollapsibleCode\';\\n\\n<InteractiveExample src={MarqueeSrc} component={<Marquee />} />\\n\\nNow, let\'s understand how this example works:\\n\\nThe **MeasureElement** component measures the width of its children and passes this information to its parent component, Marquee.\\n\\n<samp id=\\"Marquee\\">Marquee</samp>\\n\\n<CollapsibleCode src={MarqueeSrc} showLines={[8,18]}/>\\n\\n<ExampleVideo\\nsources={{\\n    android: \\"/react-native-reanimated/recordings/examples/marquee_android.mov\\",\\n    ios: \\"/react-native-reanimated/recordings/examples/marquee_ios.mov\\"\\n  }}\\n/>\\n\\nWe use the `useFrameCallback` hook to execute the animation logic on each frame.\\n\\n<CollapsibleCode src={MarqueeSrc} showLines={[57,62]}/>\\n\\nIt is located inside **ChildrenScroller** component that manages the scrolling animation by updating the offset value. It determines the horizontal translation of the child components, creates clones of the children and animates them horizontally based on the specified duration.\\n\\n<samp id=\\"Marquee\\">Marquee</samp>\\n<CollapsibleCode src={MarqueeSrc} showLines={[43,76]}/>\\n\\nThe **Marquee** component serves as the main orchestrator of the marquee effect. It calculates necessary dimensions, renders child components within a container, and coordinates the animation by utilizing the ChildrenScroller component.\\n\\n<samp id=\\"Marquee\\">Marquee</samp>\\n\\n<CollapsibleCode src={MarqueeSrc} showLines={[78,104]}/>"},{"id":"sectionlist","metadata":{"permalink":"/react-native-reanimated/examples/sectionlist","source":"@site/blog/section-list.md","title":"Section List","description":"Section lists allow you to organize long lists of content by dividing them with headings.","date":"2024-04-19T12:51:14.000Z","formattedDate":"April 19, 2024","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"sectionlist","title":"Section List"},"prevItem":{"title":"Marquee","permalink":"/react-native-reanimated/examples/marquee"}},"content":"import SectionList from \'@site/static/examples/SectionList\';\\nimport SectionListSrc from \'!!raw-loader!@site/static/examples/SectionList\';\\nimport ExampleVideo from \'@site/src/components/ExampleVideo\';\\nimport CollapsibleCode from \'@site/src/components/CollapsibleCode\';\\n\\nSection lists allow you to organize long lists of content by dividing them with headings.\\n\\n<InteractiveExample src={SectionListSrc} component={<SectionList />} />\\n\\nThe primary component, **SectionList**, acts as the main orchestrator of the entire Section List interface. It coordinates the rendering of the table of contents and individual content sections.\\n\\n<samp id=\\"SectionList\\">Section List</samp>\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[150,174]}/>\\n\\nWithin **SectionList**, there are two key components: **TableOfContents** and **SectionCards**.\\n\\n**TableOfContents** is responsible for rendering the list of section names as a table of contents. It receives props such as `data`, `visibleIndex`, `sectionCardsRef`, and `tableOfContentsRef` to manage navigation and synchronization between the table of contents and section content.\\n\\n<samp id=\\"SectionList\\">Section List</samp>\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[123,148]}/>\\n\\n**SectionCards**, on the other hand, manages the rendering of individual sections and their corresponding content. It receives props: `sections`, `visibleIndex`, `sectionCardsRef`, and `tableOfContentsRef` to render the content sections and handle scrolling interactions.\\n\\n<samp id=\\"SectionList\\">Section List</samp>\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[198,256]}/>\\n\\n<ExampleVideo\\nsources={{\\n    android: \\"/react-native-reanimated/recordings/examples/section_list_android.mov\\",\\n    ios: \\"/react-native-reanimated/recordings/examples/section_list_ios.mov\\"\\n  }}\\n/>\\n\\nThe `onScroll` in **SectionCards** calculates the offset as the user scrolls through the content and determines which section is currently most visible on the screen. It is done by comparing the distance of each section from the top of the screen - it identifies the section closest to the viewport\'s top edge.\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[204,227]}/>\\n\\nWe use the `useSharedValue` hook to create mutable shared values across different components. For instance, `selectedItem` and `visibleIndex` are [shared values](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value) used to manage the currently selected section and its visibility index.\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[151,152]}/>\\n\\nAdditionally, we use `useAnimatedStyle` hook to define [animated styles](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedStyle/) based on the shared values. Then, we apply these animated styles to components to create dynamic visual effects, such as changing font weights and adding bottom borders.\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[96,99]}/>\\n\\nTo enable interaction with the FlashList component - such as scrolling to specific sections, the code utilizes variables created using `useRef` such as `sectionCardsRef` and `tableContentsRef`\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[154,155]}/>\\n\\nHere, the `debounce` function throttles the invocations of `onScroll` event handler which improves the perfomrance.\\n\\n<CollapsibleCode src={SectionListSrc} showLines={[85,93]}/>"}]}')}}]);